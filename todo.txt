===================================
TODO - PROJET POKÉMON ECLIPSE
===================================

=== BASE DU PROJET ===

- [x] Créer la structure de dossiers : `core/`, `data/`, `ui/`, `scene/`, `battle/`, `assets/`
- [x] Créer le point d’entrée : `main.py`
- [x] Initialiser la boucle principale Pygame CE
- [x] Charger la config globale (`core/config.py`)
- [x] Créer les helpers/utilitaires (`core/utils.py`)

=== GESTION DES DONNÉES ===

- [x] Créer système de chargement JSON (`core/data_loader.py`)
- [x] Créer fichiers JSON mock pour :
  - [x] `data/pokemon.json`
  - [x] `data/types.json`
  - [x] `data/moves.json`
  - [x] `data/items.json`
  - [x] `data/starters.json`
- [x] Créer modèles de données :
  - [x] Pokémon (`core/models/pokemon.py`)
  - [x] Move, Item, etc. (`core/models/*`)

=== LOGIQUE DE RUN ===

- [x] Créer gestionnaire de run (`core/run_manager.py`)
  - [x] Équipe du joueur
  - [x] Objets possédés
  - [x] État courant de la run
- [x] Créer gestion de sauvegarde temporaire

=== UI & AFFICHAGE ===

- [x] Créer composants UI dans `ui/` :
  - [x] Boutons stylisés (`ui/button.py`)
  - [x] Barre de vie (`ui/health_bar.py`)
  - [x] Barre d'XP (`ui/xp_bar.py`)
  - [x] Texte animé
- [x] Intégrer `gif_pygame` pour les sprites animés
- [x] Créer gestionnaire d’assets si besoin (`core/assets.py`)

=== IMPORT DE CONTENU OFFICIEL (tools/) ===

- [x] Script principal : `tools/generate_data.py`
- [x] Générer les fichiers suivants :
  - [x] `pokemon.json` (Pokémon Gen 1 à 5 avec nom FR, types, stats, moves)
  - [x] `types.json` (faiblesses/résistances)
  - [x] `moves.json` (nom FR, type, catégorie, puissance, précision, PP)
  - [x] `items.json` (depuis catégories : balls, soins, baies, etc.)
  - [x] `starters.json` (liste des starters de la Gen 1 à 5)
- [x] Vérifier présence des sprites `.gif` (`assets/sprites/pokemon/back|front/`)
- [x] Log et gestion de progression (`tqdm`, logs)
- [x] Ajout script multi-threadé : `generate_all.py`

=== SCÈNES ===

- [x] Système de changement de scène (`core/scene_manager.py`)
- [x] Scènes implémentées :
  - [x] Menu principal (`scene/menu_scene.py`)
  - [x] Choix des starters (`scene/starter_scene.py`) avec animation wiggle
  - [x] Combat (`scene/battle_scene.py`)
  - [x] Scène bonus entre combats (`scene/bonus_scene.py`)
  - [x] Scène game over (`scene/gameover_scene.py`)

=== COMBAT ===

- [x] Implémenter moteur de combat (`battle/engine.py`)
  - [x] Tour par tour : joueur puis IA
  - [x] Calculs de dégâts (type, stats, puissance)
  - [x] KO et gestion PV

- [x] IA basique (`battle/ai.py`)

- [x] Gestion des capacités (`battle/move_handler.py`)
  - [x] Dégâts directs
  - [x] Effets secondaires (statuts, boosts, drain, recul)
  - [x] Attaques sans puissance (buff, debuff, statut pur)

- [x] Gestion des objets (`battle/item_handler.py`)
  - [x] Objets de soin (PV, statut)
  - [x] Objets de combat (augmentation de stats)
  - [x] Vérification des conditions d’utilisation

- [ ] Capture (`battle/capture_handler.py`)

- [ ] Intégration graphique du moteur de combat
  - [x] Affichage dynamique des messages (attaques, dégâts, effets)
  - [ ] Choix et usage de capacités avec effets visibles
  - [ ] Affichage des objets utilisés et feedback à l’écran
  - [ ] Affichage des PV, statuts, KO mis à jour en temps réel
  - [x] Ajout transitions fin de combat (victoire, défaite, capture)

=== SYSTÈME D’ÉVÉNEMENTS ===

- [ ] Gestion centralisée des événements (`core/event_manager.py`)

=== TESTS & DÉBOGAGE ===

- [ ] Ajouter logs de debug (`core/utils.py`)
- [ ] Mode debug visuel pour chaque scène
- [ ] Réinitialisation rapide d’une run

=== EXTENSIBILITÉ FUTURE ===

- [ ] Sauvegarde persistante (hors session)
- [ ] Boutique d’objets
- [ ] Support multi-langues (i18n)
- [ ] Support des mods (données custom)
