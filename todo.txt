===================================
TODO - PROJET POKÉMON ECLIPSE
===================================

=== BASE DU PROJET ===
- [x] Créer structure de dossiers : core/, data/, ui/, scene/, battle/, assets/
- [x] Créer point d’entrée : main.py
- [x] Initialiser boucle principale Pygame CE
- [x] Charger config globale (core/config.py)
- [x] Créer helpers/utilitaires (core/utils.py)

=== GESTION DES DONNÉES ===
- [ ] Créer système de chargement JSON (core/data_loader.py)
- [ ] Créer fichiers JSON mock pour :
  - [ ] data/pokemon.json
  - [ ] data/types.json
  - [ ] data/moves.json
  - [ ] data/items.json
  - [ ] data/starters.json
- [ ] Créer modèle de données Pokémon (core/models/pokemon.py)
- [ ] Créer modèle de données Move, Item, etc. (core/models/*)

=== LOGIQUE DE RUN ===
- [ ] Créer gestionnaire de run (core/run_manager.py)
  - [ ] Équipe du joueur
  - [ ] Objets possédés
  - [ ] État de la run
- [ ] Créer gestion de sauvegarde de session (temporaire uniquement)

=== UI ET AFFICHAGE ===
- [ ] Créer système de composants UI dans ui/
  - [ ] Bouton stylisé (ui/button.py)
  - [ ] Barre de vie (ui/health_bar.py)
  - [ ] Texte animé (ui/animated_text.py)
- [ ] Intégrer gif_pygame pour affichage sprites animés
- [ ] Créer gestionnaire d’assets (core/assets.py)

=== SCÈNES ===
- [ ] Créer système de changement de scène (core/scene_manager.py)
- [ ] Implémenter scènes de base :
  - [ ] scene/menu_scene.py → Choix de nouvelle run
  - [ ] scene/starter_scene.py → Choix parmi 3 starters aléatoires
  - [ ] scene/battle_scene.py → Combat tour par tour
  - [ ] scene/bonus_scene.py → Choix de récompense (soin, objet, Pokémon)
  - [ ] scene/gameover_scene.py → Fin de run (KO équipe)

=== COMBAT ===
- [ ] Implémenter moteur de combat simplifié (battle/engine.py)
  - [ ] Tour par tour : attaque joueur puis IA
  - [ ] Calculs de dégâts simples (type, puissance, stats)
  - [ ] Gestion des PV, statut KO
- [ ] Implémenter logique IA basique (battle/ai.py)
- [ ] Implémenter gestion des capacités (battle/move_handler.py)
- [ ] Implémenter gestion des effets d’objets (battle/item_handler.py)
- [ ] Implémenter logique de capture plus tard

=== MOCKS ET ASSETS ===
- [ ] Créer assets temporaires :
  - [ ] assets/sprites/placeholder.gif (sprites Pokémon)
  - [ ] assets/ui/button.png (UI)
  - [ ] assets/fonts/default.ttf
  - [ ] assets/sfx/click.wav
- [ ] Créer générique de test avec 3 Pokémon de base (mock)
- [ ] Ajouter musiques et sons de test (assets/music/)

=== SYSTÈME D’ÉVÉNEMENTS ===
- [ ] Implémenter gestion centralisée des événements Pygame (core/event_manager.py)

=== TESTS ET DÉBOGAGE ===
- [ ] Ajouter logs de debug dans utils
- [ ] Créer mode debug pour scènes (affichage des états)
- [ ] Implémenter réinitialisation de run rapide

=== EXTENSIBILITÉ FUTURE ===
- [ ] Ajouter sauvegarde persistante (hors session)
- [ ] Ajouter boutique d’objets
- [ ] Ajouter gestion multi-langues (i18n)
- [ ] Ajouter mod support (données custom)

